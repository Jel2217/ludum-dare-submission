[gd_scene load_steps=8 format=2]

[ext_resource path="res://Images/Enemies/Blue Slime/slime1.png" type="Texture" id=1]
[ext_resource path="res://Images/Enemies/Blue Slime/slime2.png" type="Texture" id=3]
[ext_resource path="res://Images/UI/EnemyHealthBar/greenbar.png" type="Texture" id=4]
[ext_resource path="res://Images/UI/EnemyHealthBar/backgroundbar.png" type="Texture" id=5]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D


# Healthbar
var green_bar = preload(\"res://Images/UI/EnemyHealthBar/greenbar.png\")
var red_bar = preload(\"res://Images/UI/EnemyHealthBar/redbar.png\")
var yellow_bar = preload(\"res://Images/UI/EnemyHealthBar/yellowbar.png\")
var splat = preload(\"res://Scenes/Effects/Splat.tscn\")
onready var healthbar = $Healthbar

var max_health = 100
var health = 100
var dead = false

var move_speed = 7500
var speed = 100

onready var nav =  get_node(\"../Navigation2D\")
onready var player =  get_node(\"../Player\")

var path
var points
var points_index = 0
var velocity = Vector2.ZERO
var glob_loc
var epsilon = 1
var lunging = false
var retreating = false
var enemy_stopping_distance = 50
var is_attacking = false
enum states {IDLE, ATTACKING, MOVING, DEAD}
var state = states.MOVING
var avelocity = Vector2.ZERO

var activated_by_glitch = false

func _ready():
	healthbar.hide()
	if $\"../../Level\".level > 5:
		max_health *= 3
	if $\"../../Level\".level > 10:
		max_health *= 6
	health = max_health
	healthbar.max_value = max_health

func enable_activated_by_glitch():
	activated_by_glitch = true
	
func _physics_process(delta):
	avelocity = (player.position- position).normalized()
	match state:
		states.IDLE:
			pass
		states.ATTACKING:
			if (player.position - position).length() > enemy_stopping_distance:
				state = states.MOVING
		states.MOVING: 
			if pathfind_to(player.position, delta): # If pathfinding has finished
				state = states.ATTACKING
		states.DEAD:
			set_collision_mask(0)
			set_collision_layer(0)
	if lunging:
		move_and_collide(avelocity*delta*speed*2)
	if retreating && (player.position - position).length() < enemy_stopping_distance:
		move_and_collide(-avelocity*delta*speed*2)
	if !(player.global_position.angle_to_point(self.global_position)>-PI/4 && player.position.angle_to_point(self.position)<(PI)/4):
		$Sprite.flip_h=true
	else:
		$Sprite.flip_h=false



func pathfind_to(location, delta):
	glob_loc = location
	points_index = 0
	points = nav.get_simple_path(position, location, true)
	if !points: return false
	if points_index>=points.size():
		return false
	var target = points[points_index]
	if position.distance_to(target) < epsilon:
		points_index = points_index + 1
		if points_index>=points.size():
			return false
		target = points[points_index]
	if !is_attacking:
		velocity = (target - position).normalized() * move_speed * delta
		velocity = move_and_slide(velocity)
	if (location - position).length() < enemy_stopping_distance:
		$AttackTimer.start()
		return true

func update_healthbar(value):
	healthbar.texture_progress = green_bar
	if value < healthbar.max_value * 0.7:
		healthbar.texture_progress = yellow_bar
	if value < healthbar.max_value * 0.35:
		healthbar.texture_progress = red_bar
	if value < healthbar.max_value:
		healthbar.show()
	healthbar.value = value

func update_health(value):
	if state == states.DEAD: return
	update_healthbar(value)
	health = value
	if health <= 0:
		state = states.DEAD
		var instance = splat.instance()
		$Sprite.hide()
		$Healthbar.hide()
		instance.start()
		add_child(instance)
		$Timer.start()
		


func _on_Timer_timeout():
	queue_free()


func _on_AttackTimer_timeout():
	if (glob_loc - position).length() < enemy_stopping_distance:
		is_attacking = true
		avelocity = (glob_loc-position).normalized()
		lunging = true
		retreating = false
		$WaitTimer.start()
	else:
		is_attacking = false
		retreating = false
		lunging = false


func _on_WaitTimer_timeout():
	avelocity = (glob_loc-position).normalized()
	retreating = true
	lunging = false
	player.update_health(player.health-1)
	$StopTimer.start()
	$AttackTimer.start()


func _on_StopTimer_timeout():
	avelocity = (glob_loc-position).normalized()
	retreating = false
"

[sub_resource type="SpriteFrames" id=2]
animations = [ {
"frames": [ ExtResource( 1 ), ExtResource( 3 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="CapsuleShape2D" id=3]
radius = 3.72738
height = 9.09635

[node name="Enemy1" type="KinematicBody2D" groups=[
"enemy",
]]
collision_layer = 2
script = SubResource( 1 )

[node name="Sprite" type="AnimatedSprite" parent="."]
frames = SubResource( 2 )
frame = 1
playing = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( -0.525555, 7.14762 )
rotation = 1.5708
shape = SubResource( 3 )

[node name="Healthbar" type="TextureProgress" parent="."]
margin_left = -12.0
margin_top = -6.0
margin_right = 12.0
margin_bottom = -1.0
value = 100.0
texture_under = ExtResource( 5 )
texture_progress = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Timer" type="Timer" parent="."]
one_shot = true

[node name="AttackTimer" type="Timer" parent="."]
wait_time = 0.5
one_shot = true

[node name="WaitTimer" type="Timer" parent="."]
wait_time = 0.2
one_shot = true

[node name="StopTimer" type="Timer" parent="."]
wait_time = 0.5

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
[connection signal="timeout" from="AttackTimer" to="." method="_on_AttackTimer_timeout"]
[connection signal="timeout" from="WaitTimer" to="." method="_on_WaitTimer_timeout"]
[connection signal="timeout" from="StopTimer" to="." method="_on_StopTimer_timeout"]
